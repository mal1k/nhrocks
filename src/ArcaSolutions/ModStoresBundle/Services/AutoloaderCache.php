<?php

namespace ArcaSolutions\ModStoresBundle\Services;

use ArcaSolutions\ModStoresBundle\ModStoresBundle;

/**
 * Class AutoloaderCache
 *
 * @package ArcaSolutions\ModStoresBundle\Services
 * @author Gabriel Fernandes <gabriel.fernandes@arcasolutions.com>
 */
class AutoloaderCache
{
    /**
     * @var ModStoresBundle
     */
    private $modstoreKernel;

    /**
     * AutoloaderCache constructor
     *
     * @param ModStoresBundle $modstoreKernel
     */
    public function __construct(ModStoresBundle $modstoreKernel)
    {
        $this->modstoreKernel = $modstoreKernel;
    }

    /**
     * Save installed plugins to installed.php
     *
     * @param $installing array
     */
    public function saveInstalled($installing)
    {
        $installed = [];

        // add plugin infos
        foreach (array_merge($this->modstoreKernel->getKernel()->getInstalled(), $installing) as $plugin) {

            $installed[$plugin->getName()]['version'] = $plugin->getComposerMetadata('version');

        }

        ksort($installed);

        // save file
        file_put_contents(__DIR__.'/../Resources/config/installed.php', $this->generateInstalledFile($installed));
    }

    /**
     * Generate file to be written as installed cache
     *
     * @param $installed
     * @return string
     */
    private function generateInstalledFile($installed)
    {
        // get converted php array code to string
        $installedString = $this->convertArrayToFormatedCodeString($installed, -1);

        return $this->getAutoloadStub($installedString);
    }

    /**
     * Convert PHP Array code to PHP array string
     *
     * @param $values
     * @param $codeLevel
     * @return string
     */
    private function convertArrayToFormatedCodeString($values, $codeLevel = 0)
    {
        $string = '';

        // returns empty if no value
        if (!$values) {
            return '';
        }

        // returns formatted string
        if ($this->isString($values)) {
            return "'{$values}'";
        }

        // returns formatted sequential array
        if ($this->isArray($values)) {

            $string .= $this->openArrayString($codeLevel);

            foreach ($values as $key => $value) {

                // add code indenter
                $string .= $this->codeIndenter($codeLevel + 2);

                // add array key if exist
                if ($this->isAssociativeArray($values)) {
                    $string .= "'{$key}' => ";
                }

                // add array value
                $string .= $this->convertArrayToFormatedCodeString($value, $codeLevel + 1);

                // add array line separator if needed
                $string .= $this->arraySeparator();

            }

            $string .= $this->closeArrayString($codeLevel + 1);

            return $string;
        }
    }

    /**
     * Verify if string
     *
     * @param $value
     * @return bool
     */
    private function isString($value)
    {
        return is_string($value);
    }

    /**
     * Verify if sequential array
     *
     * @param $value
     * @return bool
     */
    private function isArray($value)
    {
        return is_array($value);
    }

    /**
     * Return open array string
     *
     * @return string
     */
    private function openArrayString($codeLevel = 0)
    {
        return $this->codeIndenter($codeLevel).'['.PHP_EOL;
    }

    /**
     * Return n number of tab string
     *
     * @param int $level
     * @return string
     */
    private function codeIndenter($level = 0)
    {
        if ($level <= 0) {
            return '';
        }

        return str_repeat("\t", $level);
    }

    /**
     * Verify if associative array
     *
     * @param array $value
     * @return bool
     */
    private function isAssociativeArray(array $value)
    {
        if (!$this->isArray($value)) {
            return false;
        }

        return count(array_filter(array_keys($value), 'is_string')) > 0;
    }

    /**
     * Return line broker to array
     *
     * @param $codeLevel
     * @return string
     */
    private function arraySeparator($codeLevel = 0)
    {
        return $this->codeIndenter($codeLevel).','.PHP_EOL;
    }

    /**
     * Return close array string
     *
     * @return string
     */
    private function closeArrayString($codeLevel = 0)
    {
        return $this->codeIndenter($codeLevel).']';
    }

    /**
     * Get installed cache base file
     *
     * @param $string
     * @return string
     */
    private function getAutoloadStub($string)
    {
        return <<<EOF
<?php

// autoload file @generated by ModStore

return $string;
EOF;
    }
}
