<?php

namespace ArcaSolutions\BannersBundle\Repository;

use ArcaSolutions\ApiBundle\Helper\CategoryHelper;
use ArcaSolutions\BannersBundle\Entity\Banner;
use ArcaSolutions\BannersBundle\Entity\Bannerlevel;
use ArcaSolutions\CoreBundle\Helper\ModuleHelper;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\OptimisticLockException;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @package ArcaSolutions
 * @subpackage BannersBundle
 * @category Repositories
 * @author Diego Acosta Mosela <diego.mosela@arcasolutions.com>
 * @author Lucas Trentim <lucas.trentim@arcasolutions.com>
 * @author Fernando Nascimento <fernando.nascimento@arcasolutions.com>
 * @copyright ArcaSolutions Inc.
 * @version 2.0.0
 * @since 11.0.00
 */
class BannerRepository extends EntityRepository
{
    /**
     * Description
     *
     * @param Bannerlevel $level
     * @param array|null $categorizedSections
     * @return Banner|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getBanner($level, $categorizedSections = [])
    {
        static $usedBanners = [];

        $categorizedSections or $categorizedSections["general"] = null;

        if (!$level) {
            return null;
        }

        $qb = $this->createQueryBuilder('b');

        $mainConditional = $qb->expr()->andX();

        /* Time expiration conditional */
        /** @todo Para proxima versão realizar estudo para remover validações por '0000-00-00' */
        $expirationCondition = $qb->expr()->orX()->addMultiple([
            $qb->expr()->gte('b.renewalDate', 'CURRENT_DATE()'),
            $qb->expr()->eq('b.renewalDate', "'0000-00-00 00:00:00'"),
            $qb->expr()->isNull('b.renewalDate'),
        ]);

        /* Combined expiration conditions */
        $mainConditional->add(
            $qb->expr()->orX()->addMultiple([
                $expirationCondition,
            ])
        );

        /* Section and category conditionals */
        if ($categorizedSections) {
            $condSection = $qb->expr()->orX();
            $condSection->add($qb->expr()->eq('b.section', "'global'"));

            $j = 0;

            foreach ($categorizedSections as $section => $categoryIds) {
                if(!$section || $section == 'general') {
                    $condSection->add($qb->expr()->eq('b.section', "'general'"));
                    break;
                }

                $section == "deal" and $section = "promotion";

                $repository = $this->getEntityManager()
                    ->getRepository(CategoryHelper::getRepositoryNameByModule($section));

                $categories = $repository->findBy(['id' => $categoryIds]);

                foreach ($categories as $category) {
                    $aux = clone $category;
                    while($parent = $aux->getParent()) {
                        $categoryIds[] = $parent->getId();
                        $aux = $parent;
                    }
                }

                if (is_array($categoryIds)) {
                    $categoryIds[] = 0;
                } else {
                    $categoryIds = [0];
                }

                $condSection->add(
                    $qb->expr()->andX()->addMultiple([
                        $qb->expr()->eq('b.section', "'{$section}'"),
                        $qb->expr()->in('b.categoryId', ":category{$j}"),
                    ])
                );

                $qb->setParameter("category{$j}", (array)$categoryIds);

                $j++;
            }
        } else {
            $condSection = $qb->expr()->eq('b.section', ':global');
        }

        $mainConditional->add($condSection);

        /* Repeated banner exclusion conditional */
        if ($usedBanners) {
            $mainConditional->add($qb->expr()->notIn('b.id', ":ids"));
            $qb->setParameter('ids', array_keys($usedBanners));
        }

        /* Basic conditionals */
        $mainConditional->addMultiple([
            $qb->expr()->eq('b.status', "'A'"),
            $qb->expr()->eq('b.type', $level->getValue()),
        ]);

        $qb->where($mainConditional);

        $banner = $qb->addSelect('RAND() as HIDDEN rand')->setMaxResults(1)->orderBy('rand')->getQuery();
        if ($return = $banner->getOneOrNullResult()) {
            /* @var $return Banner */
            $usedBanners[$return->getId()] = true;
        }

        return $return;
    }

}
